(load-lisp (str carp-dir "lisp/error_codes.carp"))
(load-lisp (str carp-dir "lisp/compiler_helpers.carp"))
(load-lisp (str carp-dir "lisp/ast.carp"))
(load-lisp (str carp-dir "lisp/infer_types.carp"))
(load-lisp (str carp-dir "lisp/generate_names.carp"))
(load-lisp (str carp-dir "lisp/calculate_lifetimes.carp"))
(load-lisp (str carp-dir "lisp/builder.carp"))
(load-lisp (str carp-dir "lisp/func_deps.carp"))
(load-lisp (str carp-dir "lisp/generics.carp"))
(load-lisp (str carp-dir "lisp/structs.carp"))
(load-lisp (str carp-dir "lisp/globals.carp"))
(load-lisp (str carp-dir "lisp/cc.carp"))
(load-lisp (str carp-dir "lisp/annotate.carp"))
(load-lisp (str carp-dir "lisp/graph.carp"))
(load-lisp (str carp-dir "lisp/concretize.carp"))
(load-lisp (str carp-dir "lisp/sicp_solver.carp"))

(def header-files (list "\"declarations.h\"" "\"shared.h\""))
(def echo-signature-after-bake false)

(defmacro bake (func-symbol)
  (list 'compiler/bake-function-and-its-dependers (str func-symbol)))

(defn compiler/bake-function-and-its-dependers [func-name]
  (if (foreign? (eval (symbol func-name)))
    :already-baked
    (let [dependers (graph/dependers func-name)]
      (do
        ;;(println (str "Compiler is baking '" func-name "' and its users: " (join ", " dependers)))
        (graph/unload func-name)
        (map graph/unload dependers) ;; ALL the functions must be unloaded before calling try-bake on them in the next step
        (map compiler/try-bake dependers)
        (compiler/try-bake func-name)))))

(def log-ignores false)

^doc "If it's a lambda this will either bake it or mark it as generic. If it's not a lambda it will be ignored."
(defn compiler/try-bake [symbol-name]
  (let [evaled (eval (symbol symbol-name))]
    (cond
      (lambda? evaled) (compiler/bake-code symbol-name (code evaled) (meta-get evaled :ann))
      (foreign? evaled) (do (when log-ignores (println (str "compiler/try-bake will ignore foreign function '" symbol-name "'")))
                            :ignored)
      (ptr-to-global? evaled) (do (when log-ignores (println (str "compiler/try-bake will ignore ptr-to-global '" symbol-name "'")))
                                  :ignored)
      (primop? evaled) (error (str "Trying to bake primop: " evaled))
      :else (bake-global symbol-name '()))))

^doc "Compile a generic lambda to a specific, fully typed version by providing a signature with the types needed."
(defn compiler/concretize [original-func-name generic-func-name func-code func-signature]
  (let [annotated-ast (func-to-annotated-ast generic-func-name func-code func-signature nil)
        extra-deps (list original-func-name)]
    (if (generic-function? annotated-ast)
      (error (str "Failed to concretize generic function " generic-func-name ":\n" annotated-ast))
      (do
        (compiler/bake-ast generic-func-name annotated-ast func-code)
        (graph/update-node! generic-func-name :depends-on
                            (cons original-func-name (get-maybe (get graph generic-func-name) :depends-on)))))))

^doc "Will convert an s-expression to an ast and then compile it in the same way as 'bake-ast'."
(defn compiler/bake-code [func-name func-code func-type-annotation]
  (let [annotated-ast (func-to-annotated-ast func-name func-code nil func-type-annotation)]
    (if (generic-function? annotated-ast)
      (mark-lambda-as-generic func-name annotated-ast)
      (compiler/bake-ast func-name annotated-ast func-code))))

(def log-deps-when-baking-ast false)

(defn remove-non-user-defined-deps [deps]
  (let [names (keys graph)]
    (filter (fn (dep) (if (string? dep)
                        (contains? names dep)
                        (error (str "dep must be string: " dep))))
            deps)))

^doc "Will look into the 'graph' and find what actual dylib the function is compiled into."
(defn deps-by-group [deps]
  (map (fn [dep]
         (if-let [node (get-maybe graph dep)]
           (:group node)
           dep))
       deps))

^doc "Will find all the dependencies of the ast and compile it to a dylib using 'compiler/bake-group'."
(defn compiler/bake-ast [func-name ast-annotated original-code]
  (let [build-result (builder-visit-ast (new-builder) ast-annotated func-name)
        builder-deps (:deps build-result) ;; dependencies on destructors found during the builder phase
        c-program-string (builder-merge-to-c (:builder build-result))
        proto (get-function-prototype ast-annotated func-name)
        c-func-name (c-ify-name func-name)
        c-file-name (str out-dir c-func-name ".c")
        all-deps (remove-non-user-defined-deps (set (concat (:func-deps ast-annotated) builder-deps)))
        final-deps (deps-by-group all-deps)
        func-signature (get ast-annotated :type)]
    (do
      (when log-deps-when-baking-ast
        (do
          (println (str "\n- '" func-name "' -"))
          (println (str "Func deps from ast: " (join ", " (:func-deps ast-annotated))))
          (println (str "Builder deps: " (join ", " builder-deps)))
          ;;(println (str "Extra deps: " (join ", " all-deps)))
          (println (str "All deps (after pruning): " (join ", " all-deps)))
          (println (str "Final deps (by group): " (join ", " final-deps)))
          (println "")))
      (def c c-program-string)
      (compiler/bake-group func-name
                           (list {:name func-name
                                  :proto proto
                                  :src c-program-string
                                  :sig func-signature})
                           final-deps)
      (meta-set! (eval (symbol func-name)) :code original-code))))

^doc ""
(defn compiler/bake-src [func-name proto src func-signature deps]
  (compiler/bake-group func-name
                       (list {:name func-name
                              :proto proto
                              :src src
                              :sig func-signature})
                       deps))

(defn kind-of-node [code-node]
  (match (:sig code-node)
    (:fn _ _) :function
    t         :global))

^doc "A 'group' is one unit of compilation, like a .so or .dll file.
      The 'code-node':s sent to this function are dictionaries describing
      all the functions that go into the same group.
      They must contain the keys :name :proto :src :sig"
(defn compiler/bake-group [group-name code-nodes deps]
  (let [src (with-declarations-header (join "\n\n" (map (fn [d] (:src d)) code-nodes)))
        c-file-name (c-ify-name (str out-dir group-name ".c"))
        dylib-full-path (c-ify-name (str out-dir group-name (:link-extension platform-specifics)))]
    (do
      ;;(println (str "Compiling group '" group-name "'."))
      (def src src)
      (map (fn [code-node]
             (graph/add-node! (kind-of-node code-node) (:name code-node) (:proto code-node) (:src code-node) group-name nil deps 0))
           code-nodes)
      (graph/save-prototypes!)
      (save c-file-name src)
      (run-compiler (c-ify-name group-name) c-file-name deps false)
      (def out-lib (load-dylib dylib-full-path))
      (map (fn [code-node]
             (let [name (:name code-node)
                   c-name (c-ify-name name)]
               (do
                 (match (:sig code-node)
                   (:fn arg-types return-type) (register out-lib c-name arg-types return-type)
                   t                           (register-variable out-lib c-name t))
                 (graph/update-node! name :dylib-ptr out-lib)
                 (when echo-signature-after-bake (println (str name " : " (pretty-signature (:sig code-node))))))))
           code-nodes)
      :OK)))

(defn with-declarations-header [s] (str "#include \"declarations.h\"\n\n" s))

(defn complete-main-src [starting-function-name]
  (str "#include \"declarations.h\"\n\n"
       (join "\n\n" (values graph-src))
       "\n\n"
       "int main() {\n"
       (call-init-closures) "\n"
       "  " (c-ify-name starting-function-name) "();\n"
       "}\n"))

(defn call-init-closures []
  (join "\n" (map (fn [node]
                    (str "  " (c-ify-name (:name node)) "();"))
                  (filter is-init-closure? (values graph)))))

(defn is-init-closure? [node]
  (key-is-true? node :is-init-closure))

(defn bake-exe-internal [starting-function-name]
  (do
    (compiler/bake-function-and-its-dependers starting-function-name)
    (let [src (complete-main-src starting-function-name)
          c-file-name (str out-dir "main.c")
          no-dependencies ()]
      (do
        (def mainc src)
        (save c-file-name src)
        (run-compiler "-whatever-" c-file-name no-dependencies true)))))

(defmacro bake-exe [starting-function-symbol]
  (list 'bake-exe-internal (str starting-function-symbol)))
