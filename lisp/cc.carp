;; C-compiler things

(def out-dir (str carp-dir "out/"))
(def exe-out-dir "./")
(def exe-name "exe")

(def profile-external-compiler-time false)
(def total-external-compile-time 0.0f)

(def platform-specifics
  (if (windows?)
    {:dylib-extension ".dll"
     :link-extension ".lib"
     :include-flag "/I"
     :linkdir-flag "/link /NOLOGO /LIBPATH:"}
    (if (osx?)
     {:dylib-extension ".dylib"
     :link-extension ".bundle"
     :include-flag "-I"
     :linkdir-flag "-L"}
     {:dylib-extension ".so"
     :link-extension ".so"
     :include-flag "-I"
     :linkdir-flag "-L"})))

(defn link-libs (dependencies)
  (join " " (map (fn (f) (str out-dir (c-ify-name (str f))
                              (:link-extension platform-specifics))) dependencies)))

(defn include-paths ()
  (str (:include-flag platform-specifics) "/usr/local/include "
       (:include-flag platform-specifics) "/opt/local/include "
       (:include-flag platform-specifics) carp-dir "/shared"))

(defn lib-paths ()
  (cond
      (windows?) ""
      (osx?)     (str (:linkdir-flag platform-specifics) "/usr/local/lib/ -L/opt/local/lib/ -lglfw")
      (linux?)   (str (:linkdir-flag platform-specifics) "/usr/local/lib/ -lglfw")))

(defn framework-paths ()
  (if (or (windows?) (linux?))
      ""
      "-framework OpenGL -framework Cocoa -framework IOKit"))

(defn print-external-compiler-time [start-time func-name]
  (let [t (/ (itof (- (now) start-time)) 1000f)]
    (do
      (println (str (get-console-color console-color-yellow)
                    "External compilation of '" func-name "' took "
                     t " seconds."
                    (get-normal-console-color)))
      (reset! total-external-compile-time (+ total-external-compile-time t)))))

(defn run-compiler [c-func-name c-file-name total-dependencies exe]
  (let [start-time (now)]
    (do
      (if (windows?)
        (run-cl c-func-name c-file-name total-dependencies exe)
        (run-clang c-func-name c-file-name total-dependencies exe))
      (when profile-external-compiler-time
        (print-external-compiler-time start-time c-func-name)))))

(defn run-clang [c-func-name c-file-name total-dependencies exe]
  (let [clang-command (str "clang -g -DAPI= "
                           (if exe
                             (str "-o " exe-out-dir exe-name " ")
                             (str "-shared -fPIC -D_GNU_SOURCE -g -o " out-dir c-func-name
                                  (:link-extension platform-specifics) " "))
                           c-file-name " "
                           (include-paths)  " "
                           (lib-paths) " "
                           (framework-paths) " "
                           (link-libs total-dependencies))]
    (do
      (def cmd clang-command)
      (system clang-command))))

(defn run-cl [c-func-name c-file-name total-dependencies exe]
  (let [common-options "/nologo /DWIN32 /Od /Zi /MDd /Fe"
        cl-command (str "cl.exe "
                           (if exe
                             (str common-options out-dir c-func-name ".exe ")
                             (str "/DAPI=__declspec(dllexport) /LDd " common-options out-dir c-func-name ".dll "))
                           c-file-name " "
                           (include-paths)  " "
                           (lib-paths) " "
                           (framework-paths) " "
                           (link-libs total-dependencies))]
    (do
      ;;(println cl-command)
      (def cmd cl-command)
      (system cl-command))))

(defn clean-build-artifacts ()
  (if (windows?)
    (do
      (system "del declarations.h")
      (system "del *.dll")
      (system "del *.exp")
      (system "del *.lib")
      (system "del *.pdb")
      (system "del *.ilk")
      (system "del *.obj"))
    (do
      (system "rm declarations.h")
      (system (str "rm *" (:link-extension platform-specifics)))
      (system "rm *.c")
      (if (osx?)
        (system "rm -r *.dSYM"))
      )))
