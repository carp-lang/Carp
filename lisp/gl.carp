
(if (osx?) (def *LIBNAME* "libglfw3.dylib") "")
(if (linux?) (def *LIBNAME* "libglfw.so.3") "")

(def glfw (load-dylib *LIBNAME*))
(def gl (load-dylib "libGL.so.1"))

(reset! extra-header-deps (cons "<GLFW/glfw3.h>" extra-header-deps))

(register glfw "glfwInit" '() :bool)
(register glfw "glfwCreateWindow" '(:int :int (:ref :string) :GLFWmonitor :GLFWwindow) '(:ref :GLFWwindow))
(register glfw "glfwMakeContextCurrent" '((:ref :GLFWwindow)) :void)
(register glfw "glfwTerminate" '() :void)
(register glfw "glfwPollEvents" '() :void)
(register glfw "glfwWindowShouldClose" '((:ref :GLFWwindow)) :bool)
(register glfw "glfwSwapBuffers" '((:ref :GLFWwindow)) :void)
(register glfw "glfwSetWindowShouldClose" '((:ref :GLFWwindow) :bool) :void)
(register glfw "glfwGetTime" '() :double)
(register glfw "glfwDestroyWindow" '((:ref :GLFWwindow)) :void)

(def glfw-key-callback-type '(:fn ((:ref :GLFWwindow) :int :int :int :int) :void))
(register glfw "glfwSetKeyCallback" (list '(:ref :GLFWwindow) glfw-key-callback-type) :void)

(def glfw-cursor-callback-type '(:fn ((:ref :GLFWwindow) :double :double) :void))
(register glfw "glfwSetCursorPosCallback" (list '(:ref :GLFWwindow) glfw-cursor-callback-type) :void)

(register gl "glClearColor" '(:float :float :float :float) :void)
(register gl "glClear" '(:int) :void)
(register gl "glColor3f" '(:float :float :float) :void)
(register gl "glBegin" '(:int) :void)
(register gl "glEnd" '() :void)
(register gl "glVertex3f" '(:float, :float, :float) :void)
(register gl "glOrtho" '(:double :double :double :double :double :double) :void)
(register gl "glLoadIdentity" '() :void)

(def carp-gl-color-buffer-bit 16384)
(def carp-gl-lines 1)
(def carp-gl-line-strip 3)
(def carp-gl-triangles 4)

(def key-esc 256)
(def key-arrow-up 265)
(def key-arrow-right 262)
(def key-arrow-down 264)
(def key-arrow-left 263)

(def key-state-up 0)
(def key-state-down 1)
(def key-state-pressed 2)

;; glfwSetCharCallback(window, character_callback);
;; void character_callback(GLFWwindow* window, unsigned int codepoint)

;; glfwSetCursorPosCallback(window, cursor_pos_callback);
;; static void cursor_position_callback(GLFWwindow* window, double xpos, double ypos)

(defn set-clear-color []
  (glClearColor 0.0f 0.95f 0.75f 1.0f))

(defn draw-rect [x y w h]
  (do (glBegin carp-gl-triangles)
      (glVertex3f x y 0.0f)
      (glVertex3f (+ x w) y 0.0f)
      (glVertex3f (+ x w) (+ y h) 0.0f)
      (glVertex3f (+ x w) (+ y h) 0.0f)
      (glVertex3f x (+ y h) 0.0f)
      (glVertex3f x y 0.0f)
      (glEnd)))

(defn draw-line [x1 y1 x2 y2]
  (do (glBegin carp-gl-lines)
      (glVertex3f x1 y1 0.0f)
      (glVertex3f x2 y2 0.0f)
      (glEnd)))

(defn draw-circle [x y r]
  (do (glBegin carp-gl-line-strip)
      (for (i 0 65)
        (let [v (* (dtof two-pi) (/ (itof i) 64f))]
          (glVertex3f (+ x (* r (cosf v))) (+ y (* r (sinf v))) 0.0f)))
      (glEnd)))

(defstruct Vec2 [x :float y :float])

(defn draw-vec2 [v]
  (glVertex3f (Vec2-get-x v) (Vec2-get-y v) 0.0f))

(defn draw-lines (positions)
  (do (glBegin carp-gl-line-strip)
      (domap draw-vec2 positions)
      (glEnd)))

(defn draw-line-vec2 [p1 p2]
  (let [x1 (Vec2-get-x p1)
        y1 (Vec2-get-y p1)
        x2 (Vec2-get-x p2)
        y2 (Vec2-get-y p2)]
    (draw-line x1 y1 x2 y2)))

^ann glfw-key-callback-type
(defn default-on-keys [window key scancode action mods]
  (if (= key-esc key)
    (glfwSetWindowShouldClose window true)
    (do
      (print "key: ")
      (print &(str key))
      (print ", scancode: ")
      (print &(str scancode))
      (print ", action: ")
      (print &(str action))
      (print ", mods: ")
      (println &(str mods)))))

(defn default-init []
  0f)

(defn glfw-app [title init tick render-callback on-key-callback]
  (if (glfwInit)
    (let [window (glfwCreateWindow 512 512 title NULL NULL)]
      (if (null? window)
        (error "No window.")
        (do (println "Window OK.")
            (glfwMakeContextCurrent window)
            (glfwSetKeyCallback window on-key-callback)
            ;;(glOrtho 0.0 640.0 480.0 0.0 1.0 -1.0)
            (let [state (init)]
              (while (not (glfwWindowShouldClose window))
                (do
                  (glClearColor 0.1f 0.1f 0.1f 1.0f)
                  (glClear carp-gl-color-buffer-bit)
                  (glColor3f 1.0f 1.0f 1.0f)
                  (render-callback &state)
                  (reset! state (tick (copy &state)))
                  (glfwSwapBuffers window)
                  (glfwPollEvents))))
            (println "Time to go.")
            (glfwTerminate))))
    (error "Failed to initialize glfw.")))
