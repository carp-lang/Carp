
(defmacro assert (x)
  (list 'assert-eq true x))

(defn assert-approx-eq (target x)
  (do
    (assert-eq true (< x (+ target 0.1f)))
    (assert-eq true (< (- target 0.1f) x))))

(defn id (x) x)

^doc "Returns true if the key exists on the dictionary AND it is set to true."
(defn key-is-true? [dict key]
  (if (nil? dict)
    false
    (let [x (get-maybe dict key)]
      (if (nil? x)
        false
        x))))

(defn get-in (dict keys)
  (if (= () keys)
    dict
    (get-in (get dict (first keys)) (rest keys))))

(defn dict-set-in! (dict keys value)
  (if (= 1 (count keys))
    (dict-set! dict (first keys) value)
    (dict-set-in! (get dict (first keys)) (rest keys) value)))

(defn update-in! (dict key-path f)
  (dict-set-in! dict key-path (f (get-in dict key-path))))

(defn update-in (dict key-path f)
  (let [new (copy dict)]
    (do (update-in! new key-path f)
        new)))

(defn assoc (dict key val)
  (let [new (copy dict)]
    (do 
      (dict-set! new key val)
      new)))

(defn assoc-in (dict keys val)
  (let [new (copy dict)]
    (do 
      (dict-set-in! new keys val)
      new)))

(defn replicate (thing times)
  (if (< times 1)
    '()
    (cons thing (replicate thing (- times 1)))))

(defn repeatedly (f times)
  (if (< times 1)
    '()
    (cons (f) (repeatedly f (- times 1)))))

;; Replace all occurences of something in a list
(defn replace [the-list something replacement]
  (match the-list
    () ()
    (x ... xs) (if (= x something)
                 (cons replacement (replace xs something replacement))
                 (cons x (replace xs something replacement)))))

(def total-time 0)

(defmacro time (form)
  (list 'let (array 't1 (list 'now))
        (list 'let (array
                    'result form
                    't (list '- (list 'now) 't1))
              (list 'do
                    (list 'println (list 'str "Evaluating form " (str form) " took " 't "ms."))
                    (list 'reset! 'total-time (list '+ 'total-time 't))
                    'result))))

(defmacro swap! (sym f)
  (list 'reset! sym (list f sym)))

(defn inc (x) (+ x 1))
(defn dec (x) (- x 1))

(defn > [x y]
  (and (not (= x y))
       (not (< x y))))

(defn contains? (items item)
  (match items
    () false
    (x ... xs) (if (= x item)
                 true
                 (contains? xs item))))

(defn array-contains? [xs x]
  (let [result false]
    (do (for (i 0 (count xs))
          (when (= (nth xs i) x)
            (reset! result true)))
        result)))

(defn string-contains? [str char]
  (array-contains? (chars str) char))

(defn any (pred xs)
  (contains? (map pred xs) true))

(defn true? (x) (if x true false))
(defn false? (x) (if x false true))

(defn log (message value)
  (do
    (println (str message value))
    value))

(defn nil? (x) (= nil x))
(defn not-nil? (x) (not (= nil x)))

(defn int? (x) (= :int (type x)))
(defn float? (x) (= :float (type x)))
(defn double? (x) (= :double (type x)))
(defn string? (x) (= :string (type x)))
(defn symbol? (x) (= :symbol (type x)))
(defn keyword? (x) (= :keyword (type x)))
(defn env? (x) (= :env (type x)))
(def dict? env?)
(defn list? (x) (= :list (type x)))
(defn array? (x) (= :array (type x)))
(defn macro? (x) (= :macro (type x)))
(defn lambda? (x) (= :lambda (type x)))
(defn foreign? (x) (= :foreign (type x)))
(defn primop? (x) (= :primop (type x)))
(defn ptr? [x] (= :ptr (type x)))
(defn ptr-to-global? [x] (= :ptr-to-global (type x)))

(defn function? (x) (or* (lambda? x)
                         (foreign? x)
                         (primop? x)))

(defn range (start stop)
  (if (< start stop)
    (cons start (range (inc start) stop))
    '()))

(defn range-f (start stop step)
  (if (< start stop)
    (cons start (range-f (+ start step) stop step))
    '()))

(defn reverse (l)
  (match l
    () ()
    (x) (list x)
    (x ... xs) (cons-last (reverse xs) x)))

(defn has-key? (dict key)
  (not (= () (get-maybe dict key))))

(defn even? (x) (= 0 (mod x 2)))
(defn odd? (x) (= 1 (mod x 2)))

(defn last (xs)
  (match xs
    () (error "Can't call last on empty list.")
    (x) x
    _ (last (rest xs))))

(defn mapcat (f xs)
  (apply concat (map f xs)))

(def load load-lisp) ;; alias to allow inferior-lisp-mode to load file

(defn true? (x) (= true x))
(defn false? (x) (= false x))

(defn all? (pred xs)
  (= (count xs) (count (filter pred xs))))

(defn remove (pred xs)
  (filter (fn (x) (not (pred x))) xs))

(defn cons-unique (x xs)
  (if (contains? xs x)
    xs
    (cons x xs)))

(defn set-internal (xs ys)
  (match xs
    () ys
    (x ... xs) (set-internal xs (cons-unique x ys))
    (x) (cons-unique x ys)))

(defn set (xs)
  (set-internal xs '()))

(defn union (xs ys)
  (let [both (concat xs ys)]
    (set both)))

(defn intersection (xs ys)
  (match xs
    () ()
    (x ... xs) (if (contains? ys x)
                 (cons x (intersection xs ys))
                 (intersection xs ys))))

(defn sort-by [f xs]
  (match xs
    () ()
    (y ... ys) (concat (sort-by f (filter (fn [x] (f x y)) ys))
                       (list y)
                       (sort-by f (filter (fn [x] (not (f x y))) ys)))))

(defn sort [xs]
  (sort-by < xs))

(defmacro for [b body]
  (match b
    (sym start limit) (list 'let (array sym start)
                            (list 'while (list '< sym limit)
                                  (list 'do
                                        body
                                        (list 'reset! sym (list '+ sym 1)))))
    _ (error "Failed to match bindings in for loop.")))

(defn domap [f xs]
  (for (i 0 (count xs))
    (f (nth xs i))))

(defmacro str-ref [x]
  (list 'ref (list 'str x)))

(defn second [xs]
  (nth xs 1))

(defn third [xs]
  (nth xs 1))

(defn doc [x]
  (meta-get x :doc))

(defn thread-first-internal [start-value forms]
  (match forms
    ()                    start-value
    ((f ... args) ... xs) (concat (list f (thread-first-internal start-value xs)) args)
    (x ... xs)            (list x (thread-first-internal start-value xs))))

(defmacro -> [start-value ... forms]
  (thread-first-internal start-value (reverse forms)))

(defn thread-last-internal [start-value forms]
  (match forms
    ()                    start-value
    ((f ... args) ... xs) (concat (list f) args (list (thread-last-internal start-value xs)))
    (x ... xs)            (list x (thread-last-internal start-value xs))))

(defmacro ->> [start-value ... forms]
  (thread-last-internal start-value (reverse forms)))

(defmacro if-let [binding a b]
  (match binding
    [var-name expr] (list 'let (array var-name expr)
                          (list 'if (list 'nil? var-name)
                                b
                                a))
    x (error (str "Incorrect binding in if-let:" x))))

(defmacro when-let [binding a]
  (match binding
    [var-name expr] (list 'let (array var-name expr)
                          (list 'if (list 'nil? var-name)
                                nil
                                a))
    x (error (str "Incorrect binding in when-let:" x))))

(defn cond-internal [forms]
  (match forms
    () (list 'error "No condition was true in 'cond' macro.")
    (expr body ... xs) (list 'if expr body (cond-internal xs))))

(defmacro cond [... forms]
  (cond-internal forms))

(defn template [text substitutions]
  (reduce (fn [t pair] (str-replace t (first pair) (str (second pair))))
          text
          (map2 list (keys substitutions) (values substitutions))))

(defn ls () (system "ls"))
(defn pwd () (system "pwd"))
(defn user () (getenv "USER"))

(defn shell-safe? (str)
  (do
    (def shell-safe-chars "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-/.")
    (defn in-shell-safe-chars? (char) (string-contains? shell-safe-chars char))

    (all? in-shell-safe-chars? (chars str))))

(defn mkdir (dir-name)
  (if (shell-safe? dir-name)
    (system (str "mkdir " dir-name))
    (list 'error "invalid dir-name input")))
(defn touch (file-name)
  (if (shell-safe? file-name)
    (system (str "touch " file-name))
    (list 'error "invalid file-name input")))

(register-builtin "platform" '() :int)

(def platform-osx 0)
(def platform-windows 1)
(def platform-linux 2)
(def platform-unknown 100)

(defn windows? []
  (= (platform) platform-windows))

(defn osx? []
  (= (platform) platform-osx))

(defn linux? []
  (= (platform) platform-linux))

(defmacro import (module-symbol)
  (list 'import-internal (str module-symbol)))
;;`(import-internal (name ~module-symbol))

(defn import-internal [module-name]
  (load-lisp (str carp-dir "lisp/" module-name ".carp")))

(def console-color-black 0)
(def console-color-red 1)
(def console-color-green 2)
(def console-color-yellow 3)
(def console-color-blue 4)
(def console-color-magenta 5)
(def console-color-cyan 6)
(def console-color-white 7)

(def pi 3.14159265)
(def two-pi (* pi 2.0))

(defmacro eb [form]
  (list 'eval-bytecode (list 'bytecode form)))

(defn maximum [xs]
  (match (count xs)
    0 (error "Can't find maximum value in empy list")
    1 (nth xs 0)
    _ (reduce max (nth xs 0) xs)))

(defn empty? [xs]
  (= 0 (count xs)))

(defn split-every-second [xs]
  (match xs
    () (list () ())
    (_) (error "split-every-second needs an even number of arguments")
    (a b ... misc) (let [inside (split-every-second misc)]
                     (list (cons a (first inside))
                         (cons b (second inside))))))

^doc "A shorter name for 'meta-get-all'"
(defn meta [x]
  (meta-get-all x))

(defn str-internal [strings]
  (let [s @""]
    (do (for (i 0 (count strings))
          (reset! s (string-append &s (nth strings i))))
        s)))

(defmacro str* [... strings]
  (list 'str-internal (list 'ref (apply array (map (fn [s] (list 'str s)) strings)))))

(defmacro println* [... forms]
  (list 'println (list 'ref (list 'str-internal (list 'ref (apply array (map (fn [s] (list 'str s)) forms)))))))

