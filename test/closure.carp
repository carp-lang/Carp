(load "Test.carp")
(use Test)

(def x 400)

;; close over a global variable
(def closure-one
  (fn [] x))

;; close over an argument
(def closure-two
  (the (Fn [Int] Int) (fn [x] x)))

;; close over a let binding
(def closure-three
  (fn [] (let [x 4] x)))

;; dynamics can close over a global variable before it is defined
(defdynamic closure-four
  (fn [] y))

;; nested closures prefer closed-over internal environments
(def closure-five
  (fn [] (let [x 5] (fn [] x))))

(defdynamic y 500)

(defmacro test-closure-four [] (closure-four))

;; Change the global value of x (closed over in closure-one)
(set! x 1000)

(deftest test
  (assert-equal test
    1000
    (closure-one)
    "closures over global variables get the global variable's latest state.")
  (assert-equal test
    3
    (closure-two 3)
    "closures with arguments use argument values")
  (assert-equal test
    4
    (closure-three)
    "closures with let bindings prefer let bindings over global names")
  (assert-equal test
    500
    (test-closure-four)
    "dynamic closures can refer to global bindings delcared after the closure")
  (assert-equal test
    5
    ((closure-five))
    "nested closures prefer closed-over bindings")
)
