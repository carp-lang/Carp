(defmodule Integral
  (defndynamic f [sym args ret] (list 'register sym (list 'Î» args ret)))
  (defmacro register [t]
    (list 'do
          (list 'register 'MAX t)
          (list 'register 'MIN t)
	  (Integral.f 'abs [t] t)
          (Integral.f 'abs [t] t)
          (Integral.f 'bit-and [t t] t)
          (Integral.f 'bit-not [t] t)
          (Integral.f 'bit-or [t t] t)
          (Integral.f 'bit-shift-left [t t] t)
          (Integral.f 'bit-shift-right [t t] t)
          (Integral.f 'bit-xor [t t] t)
          (Integral.f 'mod [t t] t)
          ))
  (defn convert [a]
    (from-integral (to-integral a)))
  )
