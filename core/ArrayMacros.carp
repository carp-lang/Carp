(defmacro doall [f xs]
  (list 'for ['i 0 (list 'Array.length (list 'ref xs))]
        (list f (list 'Array.unsafe-nth (list 'ref xs) 'i))))

(defndynamic foreach-internal [var xs expr]
  (let [xsym (gensym-with 'xs)
        len (gensym-with 'len)
        i (gensym-with 'i)]
    (list 'let [xsym xs
                len (list 'Array.length xsym)]
          (list 'for [i 0 len]
                (list 'let [var (list 'Array.unsafe-nth xsym i)]
                      expr)))))

(defmacro foreach [binding expr]
  (if (array? binding)
    (foreach-internal (car binding) (cadr binding) expr)
    (macro-error "Binding has to be an array.")))

(defmacro for [settings :rest body] ;; settings = variable, from, to, <step>
  (if (> (length body) 1)
    (macro-error "Warning: the body of the 'for' loop can only contain one expression")
    (let [variable (car settings)
          from (cadr settings)
          to (caddr settings)
          step (if (> (length settings) 3) (cadddr settings) 1)
          comp (if (> (length settings) 4)
                 (cadddr (cdr settings))
                 (if (< step (- step step)) '> '<))
          ]
      (list
       'let (array variable from)
       (list
        'while (list comp variable to)
        (list
         'do
         (if (= (length body) 0)
           ()
           (if (list? body)
             (car body)
             body))
         (list
          'set! variable
          (list '+ variable step))))))))