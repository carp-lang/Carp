(deftype (Vector2 a) [x a, y a])

(defmodule Vector2
  (defn zero []
    (init 0.0 0.0))

  (defn random []
    (init (random-between 0.0 1.0) (random-between 0.0 1.0)))

  (defn add [a b]
    (init (+ @(x a) @(x b))
          (+ @(y a) @(y b))))

  (defn sub [a b]
    (init (- @(x a) @(x b))
          (- @(y a) @(y b))))

  (defn mul [a n]
    (init (* @(x a) n)
          (* @(y a) n)))

  (defn div [a n]
    (init (/ @(x a) n)
          (/ @(y a) n)))

  (defn = [a b]
    (and (Double.= @(x a) @(x b))
         (Double.= @(y a) @(y b))))

  (defn /= [a b]
    (not (= a b)))

  (doc approx "Check whether the vectors a and b are approximately equal.")
  (defn approx [a b]
    (and (Double.approx @(x a) @(x b))
         (Double.approx @(y a) @(y b))))

  (doc mag-sq "Get the squared magnitude of a vector.")
  (defn mag-sq [o]
    (let [x @(x o)
          y @(y o)]
      (+ (* x x) (* y y))))

  (doc mag "Get the magnitude of a vector.")
  (defn mag [o]
    (Double.sqrt (mag-sq o)))

  (doc normalize "Normalize a vector.")
  (defn normalize [o]
    (let [m (mag o)]
      (if (= m 0.0)
        @o
        (div o m))))

  (doc dist "Get the distance between the vectors a and b.")
  (defn dist [a b]
    (let [s (sub b a)]
      (mag &s)))

  (doc heading "Get the heading of the vector a.")
  (defn heading [a]
    (Double.atan2 @(y a) @(x a)))

  (doc rotate "Rotate the vector a by the radians n.")
  (defn rotate [a n]
    (let [h (+ (heading a) n)
          m (mag a)]
      (init (* (Double.cos h) m) (* (Double.sin h) m))))

  (doc dot "Get the dot product of the two vectors x and y.")
  (defn dot [a b]
    (+ (* @(x a) @(x b))
       (* @(y a) @(y b))))

  (doc angle-between "Get the angle between to vectors a and b.")
  (defn angle-between [a b]
    (let [dmm (/ (dot a b) (* (mag a) (mag b)))]
      (Double.acos (Double.clamp -1.0 1.0 dmm))))

  (doc anti-parallel? "Check whether the two vectors a and b are anti-parallel.")
  (defn anti-parallel? [a b]
    (= (angle-between a b) Double.pi))

  (doc parallel? "Check whether the two vectors a and b are parallel.")
  (defn parallel? [a b]
    (= (angle-between a b) 0.0))

  (doc perpendicular? "Check whether the two vectors a and b are perpendicular.")
  (defn perpendicular? [a b]
    (= (angle-between a b) (/ Double.pi 2.0)))

  (doc lerp "Linearly interpolate between the two vectors a and b by amnt (between 0 and 1).")
  (defn lerp [a b amnt]
    (init (xlerp @(x a) @(x b) amnt)
          (xlerp @(y a) @(y b) amnt)))
)

(deftype (Vector3 a) [x a, y a, z a])

(defmodule Vector3
  (defn zero []
    (init 0.0 0.0 0.0))

  (defn random []
    (init (random-between 0.0 1.0) (random-between 0.0 1.0) (random-between 0.0 1.0)))

  (defn = [a b]
    (and (Double.= @(x a) @(x b))
         (and (Double.= @(y a) @(y b))
              (Double.= @(z a) @(z b)))))

  (defn /= [a b]
    (not (= a b)))

  (defn add [a b]
    (init (+ @(x a) @(x b))
          (+ @(y a) @(y b))
          (+ @(z a) @(z b))))

  (defn sub [a b]
    (init (- @(x a) @(x b))
          (- @(y a) @(y b))
          (- @(z a) @(z b))))

  (defn mul [a n]
    (init (* @(x a) n)
          (* @(y a) n)
          (* @(z a) n)))

  (defn div [a n]
    (init (/ @(x a) n)
          (/ @(y a) n)
          (/ @(z a) n)))

  (doc mag-sq "Get the squared magnitude of a vector.")
  (defn mag-sq [o]
    (let [x @(x o)
          y @(y o)
          z @(z o)]
      (+ (* x x) (+ (* y y) (* z z)))))

  (doc mag "Get the magnitude of a vector.")
  (defn mag [o]
    (Double.sqrt (mag-sq o)))

  (doc normalize "Normalize a vector.")
  (defn normalize [o]
    (let [m (mag o)]
      (if (= m 0.0)
        @o
        (div o m))))

  (doc cross "Compute the cross product of the two vectors x and y.")
  (defn cross [a b]
    (init
      (- (* @(y a) @(z b))
         (* @(z a) @(y b)))
      (- (* @(z a) @(x b))
         (* @(x a) @(z b)))
      (- (* @(x a) @(y b))
         (* @(y a) @(x b)))))

  (doc dot "Get the dot product of the two vectors x and y.")
  (defn dot [a b]
    (+ (* @(x a) @(x b))
       (+ (* @(y a) @(y b))
          (* @(z a) @(z b)))))

  (doc angle-between "Get the angle between to vectors a and b.")
  (defn angle-between [a b]
    (let [dmm (/ (dot a b) (* (mag a) (mag b)))]
      (Double.acos (Double.clamp -1.0 1.0 dmm))))

  (doc anti-parallel? "Check whether the two vectors a and b are anti-parallel.")
  (defn anti-parallel? [a b]
    (= (angle-between a b) Double.pi))

  (doc parallel? "Check whether the two vectors a and b are parallel.")
  (defn parallel? [a b]
    (= (angle-between a b) 0.0))

  (doc perpendicular? "Check whether the two vectors a and b are perpendicular.")
  (defn perpendicular? [a b]
    (= (angle-between a b) (/ Double.pi 2.0)))

  (doc lerp "Linearly interpolate between the two vectors a and b by amnt (between 0 and 1).")
  (defn lerp [a b amnt]
    (init (xlerp @(x a) @(x b) amnt)
          (xlerp @(y a) @(y b) amnt)
          (xlerp @(z a) @(z b) amnt)))
)

(deftype (VectorN a) [n Int, v (Array a)])

(defmodule VectorN
  (defn zero-sized [n]
    (let [z 0.0]
      (init n (Array.replicate n &z))))

  (private unit-random)
  (hidden unit-random)
  (defn unit-random []
    (random-between 0.0 1.0))

  (defn random-sized [n]
    (init n (Array.repeat n &unit-random)))

  (defn zip- [f a b]
    (let [total (Array.allocate (Array.length a))]
      (do
        (for [i 0 (Array.length a)]
          (Array.aset-uninitialized! &total i (f @(Array.nth a i)
                                                 @(Array.nth b i))))
        (init (Array.length a) total))))

  (defn zip [f a b]
    (if (= @(n a) @(n b))
      (Maybe.Just (zip- f (v a) (v b)))
      (Maybe.Nothing)))

  (defn = [a b]
    (and (Int.= @(n a) @(n b))
         (Array.= (v a) (v b))))

  (defn /= [a b]
    (not (= a b)))

  (defn add [a b]
    (zip + a b))

  (defn sub [a b]
    (zip - a b))

  (defn mul [a n]
    (zip- * (v a) &(Array.replicate @(VectorN.n a) &n)))

  (defn div [a n]
    (zip- / (v a) &(Array.replicate @(VectorN.n a) &n)))

  (doc mag-sq "Get the squared magnitude of a vector.")
  (defn mag-sq [o]
    (Array.reduce &(fn [x y] (+ x @y)) 0.0
                  &(Array.copy-map &(fn [x] (* @x @x)) (v o))))

  (doc mag "Get the magnitude of a vector.")
  (defn mag [o]
    (Double.sqrt (mag-sq o)))

  (doc dist "Get the distance between the vectors a and b.")
  (defn dist [a b]
    (Maybe.apply (sub b a) (fn [s] (mag &s))))

  (doc normalize "Normalize a vector.")
  (defn normalize [o]
    (let [m (mag o)]
      (if (= m 0.0)
        @o
        (div o m))))

  (doc dot "Get the dot product of the two vectors x and y.")
  (defn dot [x y]
    (Maybe.apply (zip * x y)
                 (fn [x] (Array.reduce &(fn [x y] (+ x @y)) 0.0 (v &x)))))

  (doc angle-between "Get the angle between to vectors a and b.")
  (defn angle-between [a b]
    (Maybe.apply (dot a b)
                 (fn [x]
                    (let [dmm (/ x (* (mag a) (mag b)))]
                      (Double.acos (Double.clamp -1.0 1.0 dmm))))))

  (doc anti-parallel? "Check whether the two vectors a and b are anti-parallel.")
  (defn anti-parallel? [a b]
    (Maybe.apply (angle-between a b) (fn [x] (= x Double.pi))))

  (doc parallel? "Check whether the two vectors a and b are parallel.")
  (defn parallel? [a b]
    (Maybe.apply (angle-between a b) (fn [x] (= x 0.0))))

  (doc perpendicular? "Check whether the two vectors a and b are perpendicular.")
  (defn perpendicular? [a b]
    (Maybe.apply (angle-between a b) (fn [x] (= x (/ Double.pi 2.0)))))

  (doc lerp "Linearly interpolate between the two vectors a and b by amnt (between 0 and 1).")
  (defn lerp [a b amnt]
    (zip (fn [from to] (xlerp from to amnt)) a b))
)
