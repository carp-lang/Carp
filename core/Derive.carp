(doc Derive "is a mechanism for deriving interfaces automatically.

Please reference [the documentation](https://github.com/carp-lang/Carp/blob/master/docs/Derive.md)
for more information.")
(defmodule Derive
  (private derivers)
  (hidden derivers)
  (defdynamic derivers '())

  (doc make-deriver "is a mechanism for providing your own deriver by providing
the interface name `f`, the arguments it takes `args`, and a function that can
generate a body when given a type `body`.

Example:
```
(make-deriver 'zero []
  (fn [t]
    (cons 'init
      (map (fn [_] '(zero)) (members t)))))
```")
  (defndynamic make-deriver [f args body]
    (set! derivers
      (cons
        (list f
          (fn [t]
            (eval
              (list 'defmodule t
                (list 'defn f args
                  (body t))
                (list 'implements f (Symbol.prefix t f))))))
        derivers)))

  (doc make-update-deriver "is a convenience function for creating a deriver
for functions that you could pass into `update-<member>` style functions.")
  (defndynamic make-update-deriver [f]
    (make-deriver f ['o]
      (fn [t]
        (reduce
          (fn [acc m]
            (list (Symbol.concat ['update- (car m)]) acc (list 'ref f)))
          'o
          (members t)))))

  (private get-deriver)
  (hidden get-deriver)
  (defndynamic get-deriver [f derivers]
    (if (empty? derivers)
      '()
      (if (= (caar derivers) f)
        (car derivers)
        (get-deriver f (cdr derivers)))))

  (doc derivable? "checks whether a quoted interface name `f` is currently
derivable.")
  (defndynamic derivable? [f]
    (let [deriver (get-deriver f derivers)]
      (not (empty? deriver))))

  (doc derivables "returns the list of currently derivable interfaces.")
  (defndynamic derivables []
    (map car derivers))

  (doc derive "derives an interface function `f` for a type `t`.")
  (defmacro derive [t f]
    (let [deriver (get-deriver f derivers)]
      (if (empty? deriver)
        (macro-error (String.concat ["no deriver found for interface " (str f) "!"]))
        ((cadr deriver) t)))))

(use Derive)

(make-deriver '= ['o1 'o2]
  (fn [t]
    (reduce
      (fn [acc m]
        (list 'and (list '= (list (car m) 'o1) (list (car m) 'o2)) acc))
      true
      (members t))))

(make-deriver 'zero []
  (fn [t]
    (cons 'init
      (map (fn [_] '(zero)) (members t)))))

(make-deriver 'str ['o]
  (fn [t]
    (list 'String.join " "
      (list 'ref
        (append
          [(list 'copy (String.concat ["(" (str t)]))]
          (append
            (collect-into (map (fn [m] (list 'str (list (car m) 'o))) (members t)) array)
            [(list 'copy ")")]))))))
