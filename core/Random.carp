(defmodule Random

  (def a 69069.0)
  (hidden a)
  (private a)
  (def c 1.0)
  (hidden c)
  (private c)
  (def m 4294967296.0)
  (hidden m)
  (private m)
  (def s 19380110.0)
  (hidden s)
  (private s)

  (doc seed "seed resets the seed of the random number generator.")
  (defn seed []
    (set! s (fconv (System.nanotime))))

  (doc seed-from "seed-from resets the seed of the random number generator to `new-seed`.")
  (defn seed-from [new-seed]
    (set! s new-seed))

  (doc random "random returns a float from 0 to 1.")
  (defn random []
    (do
      (set! s (mod (+ (* s a) c) m))
      (/ s m)))
)

(defmodule Int
  (defn random-between [lower upper]
    (let [diff (- upper lower)]
      (+ (iconv (* (fconv diff) (Random.random))) (the Int lower))))

  (defn random []
    (random-between 0 MAX))
)

(defmodule Float
  (defn random-between [lower upper]
    (let [diff (- upper lower)]
      (+ (fconv (* (fconv diff) (Random.random))) (the Float lower))))

  (defn random []
    (random-between 0.0f (fconv Int.MAX)))
)

(defmodule Long
  (defn random-between [lower upper]
    (let [diff (- upper lower)]
      (+ (iconv (* (fconv diff) (Random.random))) (the Long lower))))

  (defn random []
    (random-between 0l (iconv Int.MAX)))
)

(defmodule Double
  (defn random-between [lower upper]
    (let [diff (- upper lower)]
      (+ (* diff (Random.random)) lower)))

  (defn random []
    (random-between 0.0 (fconv Int.MAX)))
)

(defmodule Char
  (defn random []
    (iconv (Int.random)))

  (defn random-between [a b]
    (iconv (Int.random-between (iconv a) (iconv b))))
)

(defmodule String
  (defn random-sized [n]
    (from-chars &(Array.repeat n &Char.random)))
)
