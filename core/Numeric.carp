(defmodule Numeric
  (defndynamic f [sym args ret] (list 'register sym (list 'Î» args ret)))
  (defmacro register [t]
    (list 'do
          (Numeric.f '* [t t] t)
          (Numeric.f '+ [t t] t)
          (Numeric.f '- [t t] t)
          (Numeric.f '/ [t t] t)
          (Numeric.f '< [t t] 'Bool)
          (Numeric.f '= [t t] 'Bool)
          (Numeric.f '> [t t] 'Bool)
          (Numeric.f 'copy [(list 'ref t)] t)
          (Numeric.f 'dec [t] t)
          (Numeric.f 'from-floating ['Floating] t)
          (Numeric.f 'from-integral ['Integral] t)
          (Numeric.f 'inc [t] t)
          (Numeric.f 'neg [t] t)
          (Numeric.f 'to-bytes [t] 'Long)
          (Numeric.f 'to-floating [t] 'Floating)
          (Numeric.f 'to-integral [t] 'Integral)
          ))
  )

(defmodule NumericRef
  (defndynamic binop [nm t] (list 'defn nm '[a b] (list nm (list 'the t '@a) '@b)))
  (defmacro register [t]
    (list 'do
          (NumericRef.binop '= t)
          (NumericRef.binop '< t)
          (NumericRef.binop '> t)
          (NumericRef.binop '+ t)
          ))
  )
