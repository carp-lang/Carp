(defmodule Pointer
  (doc eq "checks two pointers for equality.")
  (deftemplate eq (Fn [(Ptr p) (Ptr p)] Bool) "bool $NAME($p *p1, $p *p2)" " $DECL { return p1 == p2; }")
  (doc to-ref "converts a pointer to a reference type.

The user will have to ensure themselves that this is a safe operation.")
  (deftemplate to-ref (Fn [(Ptr p)] (Ref p)) "$p* $NAME($p* p)" " $DECL { return p; }")
  (doc to-value "converts a pointer to a value.

The user will have to ensure themselves that this is a safe operation.")
  (deftemplate to-value (Fn [(Ptr p)] p) "$p $NAME($p* p)" " $DECL { return *p; }")
  (doc add "adds a long integer value to a pointer.")
  (deftemplate add (Fn [(Ptr p) Long] (Ptr p)) "$p* $NAME($p* p, Long x)" " $DECL { return p + x; }")
  (doc sub "subtracts a long integer value from a pointer.")
  (deftemplate sub (Fn [(Ptr p) Long] (Ptr p)) "$p* $NAME($p* p, Long x)" " $DECL { return p - x; }")
  (doc width "gets the byte size of a pointer.")
  (deftemplate width (Fn [(Ptr p)] Long) "Long $NAME($p* p)" " $DECL { return sizeof(*p); }")
  (doc to-long "converts a pointer to a long integer.")
  (deftemplate to-long (Fn [(Ptr p)] Long) "Long $NAME($p* p)" " $DECL { return (Long)p; }")
  (doc from-long "converts a long integer to a pointer.")
  (deftemplate from-long (Fn [Long] (Ptr p)) "$p* $NAME(Long p)" " $DECL { return ($p*)p; }")

  (doc set-unsafe
    "Sets the value of a pointer."
    "The user will have to ensure this operation is safe.")
  (deftemplate set-unsafe (Fn [(Ptr p) (Ref a b)] (Ptr p)) "$p* $NAME($p* p, void* a)" "$DECL { *p = *($p*)a; return p;}")

  (doc cast
     "Cast a pointer to type p to a pointer to type a."
     "The value of the `a` argument is ignored.")
  (deftemplate cast (Fn [(Ptr p) a] (Ptr a)) "$a* $NAME($p* p, $a a)" "$DECL { *($a*)p = CARP_MALLOC(sizeof($a)); return ($a*)p;}")

  (doc leak
     "Allocate a new pointer that's a copy of the value of `Ref`"
     "The Carp borrow checker won't delete this pointer. You will need to delete it manually by calling `Pointer.free`.")
  (deftemplate leak (Fn [(Ref a b)] (Ptr a)) "$a* $NAME($a* r)" "$DECL { void *leak = CARP_MALLOC(sizeof($a)); memcpy(leak, r, sizeof($a)); return ($a*)leak;}")

  (doc free
     "Free a pointer."
     "Users need to manually verify that this operation is safe.")
  (deftemplate free (Fn [(Ptr p)] Unit) "void $NAME($p* p)" "$DECL {CARP_FREE(p);}")

  (doc set "Sets the value of a pointer.")
  (deftemplate set (Fn [(Ptr p) p] (Ptr p)) "$p* $NAME($p* p, $p a)" "$DECL { *p = a; return p;}")

  (defn inc [a] (Pointer.add a 1l))
  (implements inc Pointer.inc)
  (defn dec [a] (Pointer.sub a 1l))
  (implements dec Pointer.dec)
)
