on:
  push:
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

name: Create Release (Windows)

jobs:
  build:
    name: Create Release
    runs-on: windows-latest
    steps:
      - name: Get tag name
        id: get_tag_name
        shell: bash
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Check out
        uses: actions/checkout@v2

      - name: Install Scoop
        run: |
          iwr -useb get.scoop.sh | iex
          echo "~\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          echo "C:\ProgramData\scoop\shims" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Install Stack
        run: scoop install stack

      - name: Install Zip
        shell: bash
        run: scoop install zip

      - uses: actions/cache@v1
        name: Cache stack dependencies
        with:
          path: C:\\Users\\runneradmin\\AppData\\Local\\Programs\\stack
          key: ${{ runner.os }}-stack-deps-${{ github.sha }}
          restore-keys: ${{ runner.os }}-stack-deps

      - uses: actions/cache@v1
        name: Cache stack build
        with:
          path: C:\\Users\\runneradmin\\AppData\\Roaming\\stack\
          key: ${{ runner.os }}-stack-build-${{ github.sha }}
          restore-keys: ${{ runner.os }}-stack-build

      - name: Install Clang
        run: scoop install llvm --global

      - name: Build and zip
        shell: bash
        run: "./scripts/release.sh ${{ steps.get_tag_name.outputs.VERSION }} --noprompt"

      - name: Create Github Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag_name.outputs.VERSION }}_Windows
          release_name: Release ${{ steps.get_tag_name.outputs.VERSION }}_Windows
          body: |
            This is a release of the Carp compiler on Windows.
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./releases/${{ steps.get_tag_name.outputs.VERSION }}.zip
          asset_name: ${{ steps.get_tag_name.outputs.VERSION }}.zip
          asset_content_type: application/zip
